---
- name: Add '# doris be' to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertafter: EOF
    line: '# doris be'
    backup: true

- name: Add all doris be to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertafter: EOF
    line: "{{ hostvars[item]['ansible_host'] }}    {{ item }}"
  with_items:
    - "{{ groups['doris_be'] }}"

- name: Create a directory for ansible to transfer files
  ansible.builtin.file:
    path: "{{ ansible_transfer_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: "Create system user {{ doris_system_user }}"
  ansible.builtin.user:
    name: "{{ doris_system_user }}"
    password: "{{ doris_system_password | password_hash('sha512', 'salt') }}"
    shell: /bin/bash

- name: "Create Doris deploy directory {{ doris_deploy_dir }}"
  ansible.builtin.file:
    path: "{{ doris_deploy_dir }}"
    state: directory
    owner: "{{ doris_system_user }}"
    group: "{{ doris_system_user }}"
    mode: '0755'

- name: Copy Doris package to remote
  ansible.builtin.copy:
    src: "{{ local_doris_pkg_path }}"
    dest: "{{ ansible_transfer_dir }}"
    owner: root
    group: root
    mode: '0755'

- name: Uncompress Doris package
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ ansible_transfer_dir }}/{{ doris_pkg_name }}"
    dest: "{{ ansible_transfer_dir }}/"
    owner: root
    group: root
    mode: '0755'

- name: "Copy Doris BE deployment file to {{ doris_deploy_dir }}"
  ansible.builtin.copy:
    remote_src: true
    src: "{{ item }}"
    dest: "{{ doris_deploy_dir }}"
    owner: "{{ doris_system_user }}"
    group: "{{ doris_system_user }}"
    mode: '0755'
  with_items:
    - "{{ remote_doris_pkg_uncompressed_dir }}/be"
    - "{{ remote_doris_pkg_uncompressed_dir }}/extensions"

- name: "Clean remote temporary directory"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ remote_doris_pkg_uncompressed_dir }}"

- name: "Create Doris BE data directory {{ doris_be_data_dir }}"
  ansible.builtin.file:
    path: "{{ doris_be_data_dir }}"
    state: directory
    owner: "{{ doris_system_user }}"
    group: "{{ doris_system_user }}"
    mode: '0755'

- name: Change Doris BE configurations
  ansible.builtin.blockinfile:
    path: "{{ doris_be_config }}"
    block: |
      JAVA_HOME = {{ java_home }}
      priority_networks = {{ hostvars[inventory_hostname]['ansible_host'] }}/{{cidr_prefix_length}}
      storage_root_path = {{ doris_be_data_dir }}
      enable_feature_binlog = true
      streaming_load_max_mb = {{ doris_be_streaming_load_max_mb }}
      max_dynamic_partition_num = {{ doris_be_max_dynamic_partition_num }}
      download_worker_count = {{ doris_be_download_worker_count }}
    backup: true

- name: Start Doris BE
  ansible.builtin.shell: |
    cd {{ doris_deploy_dir }}/be/
    bin/start_be.sh --daemon
  become: true
  become_user: "{{ doris_system_user }}"
  changed_when: true

- name: Wait for ports to become open on the host, don't start checking for 30 seconds
  ansible.builtin.wait_for:
    port: "{{ item }}"
    host: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
    state: started
    delay: 30
    timeout: 90
  with_items:
    - 9060
    - 8040
    - 9050
    - 8060

- name: Pause for 15 seconds
  ansible.builtin.pause:
    seconds: 15
  delegate_to: fe-1

- name: Copy check-be-join-status.sh to fe-1 node
  ansible.builtin.copy:
    src: "files/doris/check-be-join-status.sh"
    dest: "{{ ansible_transfer_dir }}"
    owner: root
    group: root
    mode: '0744'
  delegate_to: fe-1
  run_once: true
  when:
    - groups['doris_be'] | length > 1

- name: Check BE joining status. If joining is successful, continue. If it fails, play will stop, then please troubleshoot manually
  ansible.builtin.command: "/usr/bin/sh {{ ansible_transfer_dir }}/check-be-join-status.sh {{ hostvars[inventory_hostname]['ansible_host'] }}"
  delegate_to: fe-1
  register: be_join_status
  failed_when: "'false' in be_join_status.stdout"
  changed_when: false
  when:
    - groups['doris_be'] | length > 1
