---
- name: Create a directory for ansible to transfer files
  ansible.builtin.file:
    path: "{{ ansible_transfer_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: "Copy mysql server package to remote {{ ansible_transfer_dir }} directory"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_transfer_dir }}"
    owner: root
    group: root
    mode: '0755'
  with_items:
    - "{{ local_mysql_server_pkg_path }}"
    - "{{ local_mysql_server_dependencies_pkg_path }}"

- name: "Delete temporary directory {{ ansible_transfer_dir }}/tmp"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ ansible_transfer_dir }}/tmp"

- name: "Create temporary directory {{ ansible_transfer_dir }}/tmp"
  ansible.builtin.file:
    path: "{{ ansible_transfer_dir }}/tmp"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Uncompress mysql server package
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ item }}"
    dest: "{{ ansible_transfer_dir }}/tmp"
    owner: root
    group: root
    mode: '0755'
  with_items:
    - "{{ ansible_transfer_dir }}/{{ mysql_server_pkg_name }}"

- name: Uncompress mysql server package dependencies
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ item }}"
    dest: "{{ ansible_transfer_dir }}/tmp"
    owner: root
    group: root
    mode: '0755'
  with_items:
    - "{{ ansible_transfer_dir }}/{{ mysql_server_dependencies_pkg_name }}"
  when: system_software_repository_is_available | bool

- name: "Find all rpm package in {{ ansible_transfer_dir }}/tmp directory"
  ansible.builtin.find:
    paths: "{{ ansible_transfer_dir }}/tmp"
    patterns: "*.rpm"
  register: rpm_files

- name: Set host variable rpm_list
  ansible.builtin.set_fact:
    rpm_list: "{{ rpm_files.files | map(attribute='path') | list }}"

- name: Install mysql server
  ansible.builtin.yum:
    name: "{{ rpm_list }}"
    state: present

- name: Create mysql data directory
  ansible.builtin.file:
    path: "{{ mysql_data_dir }}"
    state: directory
    owner: mysql
    group: mysql
    mode: '0755'

- name: "Template my.cnf.j2 out to /etc/my.cnf"
  ansible.builtin.template:
    src: templates/my.cnf.j2
    dest: "/etc/my.cnf"
    owner: root
    group: root
    mode: '0644'

- name: Start mysql server
  systemd:
    name: mysqld
    state: started
    enabled: true

- name: Wait for ports to become open on the host, don't start checking for 30 seconds
  ansible.builtin.wait_for:
    port: "{{ item }}"
    host: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
    state: started
    delay: 30
    timeout: 60
  with_items:
    - 3306

- name: Get mysql temporary root password
  ansible.builtin.shell: cat /var/log/mysqld.log | grep 'temporary password' | awk '{ print $NF }' | tail -n 1
  register: mysql_tmp_password
  changed_when: false

- name: Set new mysql root password
  ansible.builtin.command: mysqladmin -u root -p{{ mysql_tmp_password.stdout }} password {{ mysql_root_password }}
  changed_when: true

- name: "Template create_root_remote_account.sql.j2 out to {{ ansible_transfer_dir }}/create_root_remote_account.sql"
  ansible.builtin.template:
    src: templates/create_root_remote_account.sql.j2
    dest: "{{ ansible_transfer_dir }}/create_root_remote_account.sql"
    owner: root
    group: root
    mode: '0600'
  when: mysql_root_remote_account_enable | bool

- name: Create root remote account
  ansible.builtin.shell: |
    mysql -uroot -p'{{ mysql_root_password }}' < {{ ansible_transfer_dir }}/create_root_remote_account.sql
  when: mysql_root_remote_account_enable | bool
  changed_when: true

- name: "Delete {{ ansible_transfer_dir }}/create_root_remote_account.sql"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ ansible_transfer_dir }}/create_root_remote_account.sql"
  when: mysql_root_remote_account_enable | bool
